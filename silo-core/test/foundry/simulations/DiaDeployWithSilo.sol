// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.28;

import {IntegrationTest} from "silo-foundry-utils/networks/IntegrationTest.sol";
import {IWrappedNativeToken} from "silo-core/contracts/interfaces/IWrappedNativeToken.sol";
import {IERC20} from "openzeppelin5/token/ERC20/IERC20.sol";

import {DIAOracleDeploy} from "silo-oracles/deploy/dia-oracle/DIAOracleDeploy.s.sol";
import {DIAOracleFactoryDeploy} from "silo-oracles/deploy/dia-oracle/DIAOracleFactoryDeploy.s.sol";

import {console2} from "forge-std/console2.sol"; 
import {IDIAOracle} from "silo-oracles/contracts/interfaces/IDIAOracle.sol";
import {IDIAOracleFactory} from "silo-oracles/contracts/interfaces/IDIAOracleFactory.sol";
import {SiloDeployWithDeployerOwner} from "silo-core/deploy/silo/SiloDeployWithDeployerOwner.s.sol";
import {SiloDeployerDeploy} from "silo-core/deploy/SiloDeployerDeploy.s.sol";

// FOUNDRY_PROFILE=core_test forge test -vv --ffi --mt test_3
contract DiaDeployWithSilo is IntegrationTest {
    function setUp() public {
        uint256 blockToFork = 339644031;
        vm.createSelectFork(vm.envString("RPC_ARBITRUM"), blockToFork);
    }

    receive() external payable {}

    function test_1() public {
        DIAOracleFactoryDeploy factoryDeploy = new DIAOracleFactoryDeploy();
        factoryDeploy.disableDeploymentsSync();

        address factory = address(factoryDeploy.run());
        console2.log(factory);

        bytes memory input = hex"123aabe800000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000159dbe26c18cdaad2019cee8a2851ca2c9a8908200000000000000000000000002f92800f57bcd74066f5709f1daa1a4302df875000000000000000000000000f66c3c5661d870a46b0ac1bc7676b03e5f93e4ec00000000000000000000000000000000000000000000000000000000000153d9000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000005f5e100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008504541532f5553440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

        console2.log("Len of config generated by SiloDeployer", input.length);
        (bool success, bytes memory data) = address(factory).call(input);
        console2.log("success?");
        console2.log(success);
        console2.log(vm.toString(data));

        assertTrue(success);
    }

    function test_2() public {
        DIAOracleFactoryDeploy factoryDeploy = new DIAOracleFactoryDeploy();
        factoryDeploy.disableDeploymentsSync();

        address factory = address(factoryDeploy.run());
        console2.log(factory);
        IDIAOracle.DIADeploymentConfig memory config;

        bytes memory input = abi.encodeCall(IDIAOracleFactory.create, (config, bytes32(0)));
        console2.log("Len of config generated with zero config", input.length);

        (bool success, bytes memory data) = address(factory).call(input);
        console2.log("success?");    
        console2.log(success);    
        console2.log(vm.toString(data));    

        assertTrue(success);
    }

    function test_3() public {
        DIAOracleFactoryDeploy factoryDeploy = new DIAOracleFactoryDeploy();
        factoryDeploy.disableDeploymentsSync();
        vm.allowCheatcodes(address(factoryDeploy.run()));

        SiloDeployerDeploy siloDeployerDeploy = new SiloDeployerDeploy();
        vm.allowCheatcodes(address(siloDeployerDeploy.run()));

        SiloDeployWithDeployerOwner siloDeploy = new SiloDeployWithDeployerOwner();
        siloDeploy.useConfig("Silo_PEAS_USDC");
        siloDeploy.run();
    }
}
