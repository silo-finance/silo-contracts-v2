// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

// Libraries
import "forge-std/Test.sol";
import "forge-std/console.sol";

// Contracts
import {Invariants} from "./Invariants.t.sol";
import {Setup} from "./Setup.t.sol";
import {ISiloConfig} from "silo-core/contracts/SiloConfig.sol";
import {MockSiloOracle} from "./utils/mocks/MockSiloOracle.sol";
import {IERC20} from "forge-std/interfaces/IERC20.sol";

/*
 * Test suite that converts from  "fuzz tests" to foundry "unit tests"
 * The objective is to go from random values to hardcoded values that can be analyzed more easily
 */
contract CryticToFoundry is Invariants, Setup {
    CryticToFoundry Tester = this;
    uint256 constant DEFAULT_TIMESTAMP = 337812;

    modifier setup() override {
        targetActor = address(actor);
        _;
        targetActor = address(0);
    }

    function setUp() public {
        // Deploy protocol contracts
        _setUp();

        // Deploy actors
        _setUpActors();

        // Initialize handler contracts
        _setUpHandlers();

        /// @dev fixes the actor to the first user
        actor = actors[USER1];

        vm.warp(DEFAULT_TIMESTAMP);
    }

    ///////////////////////////////////////////////////////////////////////////////////////////////
    //                                 FAILING INVARIANTS REPLAY                                 //
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////////////////////////
    //                              FAILING POSTCONDITIONS REPLAY                                //
    ///////////////////////////////////////////////////////////////////////////////////////////////

    function test_replay_2deposit() public {
        _setUpActor(0x0000000000000000000000000000000000010000);
        _delay(326792);
        Tester.mint(340282423155723237052512385577070742059, 30, 112, 137);
        _delay(112445);
        Tester.borrowSameAsset(42600331007945432488953015756406260199586848175550016017269446075617156696703, 219, 17);
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(121858);
        Tester.withdraw(400000000000000001, 226, 7, 3);
        _setUpActor(0x0000000000000000000000000000000000010000);
        _delay(322368);
        Tester.mint(42404062006125301202441522305678285491801942013043179613926859988682107009381, 3, 5, 151);
        _delay(82908);
        Tester.deposit(31537907699778852750889197219171253619287916475511501392384538170700431377447, 129, 194, 4);
        _setUpActor(0x0000000000000000000000000000000000030000);
        _delay(510506);
        Tester.transferFrom(340282366921367500787341342538325810693, 29, 139, 55);
        _delay(470226);
        Tester.accrueInterestForSilo(20);
        _delay(523714);
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(318510);
        Tester.borrow(1431, 253, 101);
        _delay(403354);
        Tester.borrow(115792089237316195423570985008687907853269984665640564039456684007913129639935, 131, 161);
        _setUpActor(0x0000000000000000000000000000000000030000);
        _delay(120254);
        Tester.repay(115792089237316195423570985008687907853269984665640564039456734007913129639936, 29, 27);
        _setUpActor(0x0000000000000000000000000000000000010000);
        _delay(281035);
        Tester.accrueInterest(184);
        _delay(74755);
        Tester.redeem(805, 251, 0, 73);
        _delay(546797);
        Tester.withdraw(112881171543084320218233664296550034093820093788737819506842314057101362851323, 71, 223, 3);
        _setUpActor(0x0000000000000000000000000000000000030000);
        _delay(222904);
        Tester.accrueInterestForBothSilos();
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(1);
        Tester.transfer(5192296858534827628530496329220096, 106, 13);
        _setUpActor(0x0000000000000000000000000000000000030000);
        _delay(205926);
        Tester.accrueInterest(179);
        _delay(224813);
        Tester.transitionCollateral(
            84246787061643793349706047560825246346066124951119394853597822786792919176150, 32, 3, 198
        );
        _setUpActor(0x0000000000000000000000000000000000010000);
        _delay(136392);
        Tester.setOraclePrice(115792089237316195423570985008687907853227449369775446731524662181984158613504, 29);
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(539344);
        Tester.transfer(5362823156797781187210207540268264814948581286588143478983588496603877642668, 103, 253);
        _setUpActor(0x0000000000000000000000000000000000030000);
        _delay(18);
        Tester.accrueInterestForSilo(199);
        _setUpActor(0x0000000000000000000000000000000000010000);
        _delay(465937);
        Tester.borrow(748, 26, 163);
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(33271);
        Tester.transfer(42, 11, 225);
        _setUpActor(0x0000000000000000000000000000000000030000);
        _delay(275524);
        Tester.liquidationCall(1442695040888963407, true, RandomGenerator(127, 35, 128));
        _delay(536927);
        _delay(246295);
        Tester.approve(340743354212339922144397487283364652957, 78, 32);
        _delay(88843);
        Tester.mint(115792089237316195423570985008687907853269984665640525353831356339779539042305, 16, 1, 120);
        _delay(548675);
        Tester.borrowShares(0, 54, 86);
        _setUpActor(0x0000000000000000000000000000000000010000);
        _delay(4178);
        Tester.accrueInterestForSilo(32);
        _delay(146649);
        Tester.transitionCollateral(
            68968116168353455164448687218827596980819750568485127606872085673449290848664, 253, 3, 85
        );
        _setUpActor(0x0000000000000000000000000000000000030000);
        _delay(73042);
        Tester.accrueInterestForSilo(0);
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(452188);
        Tester.deposit(2835717307, 103, 167, 147);
        _setUpActor(0x0000000000000000000000000000000000010000);
        _delay(44068);
        Tester.borrow(9294144155402753713988155549340770862132607526699515648034443283331442187961, 155, 178);
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(592515);
        Tester.transferFrom(218, 109, 136, 131);
        _delay(10676);
        _delay(498303);
        Tester.accrueInterest(149);
        _delay(322356);
        Tester.borrow(79504030475126641189541343166228882398809625195047202917607555722339407064488, 252, 141);
        _delay(207835);
        Tester.setOraclePrice(47802705460227015057085134743075784635458659013379966996404071779219583956020, 7);
        _delay(156190);
        Tester.repayShares(7176630726121559842940422712809545402480929567350730235744157411492037105436, 165, 0);
        _setUpActor(0x0000000000000000000000000000000000030000);
        _delay(343595);
        Tester.borrow(2796547478, 54, 171);
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(127251);
        Tester.mint(547, 110, 95, 127);
        _setUpActor(0x0000000000000000000000000000000000030000);
        _delay(51841);
        Tester.repayShares(41672446510838766523857712807056202263862879550163662223875007680312195630332, 99, 189);
        _setUpActor(0x0000000000000000000000000000000000010000);
        _delay(49735);
        Tester.repay(100166214193055999018444550698493832623619773808160596483443253060671132028804, 105, 97);
        _setUpActor(0x0000000000000000000000000000000000030000);
        _delay(127047);
        Tester.accrueInterest(216);
        _delay(350071);
        _setUpActor(0x0000000000000000000000000000000000010000);
        _delay(469846);
        Tester.redeem(937, 18, 20, 147);
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(263829);
        Tester.borrowSameAsset(0, 233, 172);
        _delay(590871);
        Tester.transitionCollateral(
            14761047332328394298734609192767538440915600377681226255139613772013521941518, 127, 67, 240
        );
        _delay(292163);
        _setUpActor(0x0000000000000000000000000000000000030000);
        _delay(254414);
        Tester.repayShares(101156382406283316235203492969479858084495757060790468590779640711737527641094, 151, 14);
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(289103);
        Tester.redeem(115792089237316195423570985008687907853269984665640564039457584007913096099418, 111, 0, 135);
        _setUpActor(0x0000000000000000000000000000000000010000);
        _delay(291085);
        Tester.liquidationCall(
            115792089237316195423570985008687907852929702298719625562901029347793841780962,
            true,
            RandomGenerator(75, 32, 97)
        );
        _delay(322360);
        Tester.liquidationCall(
            100705822755797986844807108083844272329174860897354508845716751160204927602528,
            false,
            RandomGenerator(0, 211, 199)
        );
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(465936);
        Tester.borrow(78151560562798796088113475447611670845103880481015867865453936790963209217746, 34, 130);
        _delay(119327);
        Tester.repayShares(1442695040888963408, 115, 245);
        _setUpActor(0x0000000000000000000000000000000000010000);
        _delay(584865);
        Tester.accrueInterestForBothSilos();
        _setUpActor(0x0000000000000000000000000000000000030000);
        _delay(435053);
        Tester.borrowSameAsset(287, 45, 231);
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(419863);
        Tester.borrowShares(71725804015514197906516732038989846356915568653603672067196254129928009016674, 34, 78);
        _setUpActor(0x0000000000000000000000000000000000030000);
        _delay(322355);
        Tester.borrow(22913950276121202204665995173353237681795516719644224828692154597748925422384, 59, 183);
        _delay(484608);
        Tester.redeem(40316201433589638123655257409212063632792244803144820517393447242453697989954, 149, 100, 251);
        _delay(162093);
        Tester.deposit(29799111562484377783571974599398757840129644635709594245385574922013139211137, 42, 70, 58);
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(501741);
        Tester.mint(128000000000000000000, 127, 5, 111);
        _setUpActor(0x0000000000000000000000000000000000030000);
        _delay(320326);
        Tester.deposit(2361183241434822606849, 17, 218, 223);
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(322340);
        Tester.withdraw(89043528066244806717564699915414632025379611611702775235307745263004865740049, 30, 79, 74);
        _setUpActor(0x0000000000000000000000000000000000010000);
        _delay(94023);
        Tester.accrueInterest(57);
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(232898);
        Tester.repayShares(42714157667943464484403739464495506162265576240657962102949397264912262505238, 26, 6);
        _setUpActor(0x0000000000000000000000000000000000030000);
        _delay(214731);
        Tester.liquidationCall(
            108900736377646891338439571164120660954653326782154224727987927348339673092889,
            true,
            RandomGenerator(135, 253, 13)
        );
        _delay(166521);
        Tester.borrowShares(299999999999999999, 225, 240);
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(342847);
        Tester.accrueInterestForBothSilos();
        _setUpActor(0x0000000000000000000000000000000000010000);
        _delay(155855);
        Tester.switchCollateralToThisSilo(103);
        _delay(278456);
        Tester.repayShares(115544188759759277525497750455392079906002492955165261214430112378703874259663, 101, 124);
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(519847);
        Tester.switchCollateralToThisSilo(96);
        _setUpActor(0x0000000000000000000000000000000000030000);
        _delay(428874);
        Tester.accrueInterestForSilo(31);
        _setUpActor(0x0000000000000000000000000000000000010000);
        _delay(444463);
        Tester.approve(115792089237316195423570985008687907853269984665640564039457584007913129639931, 179, 103);
        _setUpActor(0x0000000000000000000000000000000000030000);
        _delay(14);
        Tester.repayShares(110920378963392212649493060176806913912452367818944256912674297320545303834175, 37, 62);
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(378501);
        Tester.borrowSameAsset(
            115792089237316195423570985008687907853269984665640564039457584007913129639679, 123, 101
        );
        _setUpActor(0x0000000000000000000000000000000000010000);
        _delay(389577);
        Tester.redeem(5878623614256507594275124645717695763639139257454428159, 251, 112, 154);
        _delay(107579);
        Tester.accrueInterestForBothSilos();
        _delay(501741);
        Tester.transferFrom(
            48423342178271900787690832218123481614460479762686467618194866471352101106425, 252, 20, 251
        );
        _delay(179031);
        Tester.transfer(4707171274986021999791756135322573482393268001625885099170291661177966865747, 17, 0);
        _setUpActor(0x0000000000000000000000000000000000030000);
        _delay(25326);
        Tester.accrueInterest(55);
        _delay(99730);
        Tester.borrow(52165657645078014709718748542191291004864297980742433096773131503911340358893, 155, 128);
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(211484);
        Tester.borrow(340282366920938489649734712806808010285, 19, 7);
        _setUpActor(0x0000000000000000000000000000000000030000);
        _delay(69708);
        Tester.setOraclePrice(94185460433841111298724052758480824076375571386374334690062806564761536153173, 239);
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(486903);
        Tester.transferFrom(
            115792089237316195423570985008687907852929587110398237040810198935240031738400, 179, 174, 46
        );
        _setUpActor(0x0000000000000000000000000000000000010000);
        _delay(378500);
        Tester.borrow(590295810358705651711, 251, 0);
        _delay(68210);
        Tester.switchCollateralToThisSilo(21);
        _setUpActor(0x0000000000000000000000000000000000030000);
        _delay(169263);
        Tester.borrow(110808208764084645421916760482478872398595722131837858884719311352977920150687, 231, 5);
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(195959);
        Tester.borrow(30034329642511539190999429960246141613870787370572997852559323888747949400624, 21, 31);
        _setUpActor(0x0000000000000000000000000000000000010000);
        _delay(25979);
        Tester.transferFrom(80532227501911966871447717436599133832961950275554026362053477421488298872145, 35, 10, 1);
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(202121);
        Tester.accrueInterestForSilo(69);
        _delay(203046);
        Tester.accrueInterestForBothSilos();
        _delay(305509);
        Tester.accrueInterestForBothSilos();
        _setUpActor(0x0000000000000000000000000000000000030000);
        _delay(469159);
        Tester.accrueInterest(252);
        _delay(239462);
        Tester.approve(73010143390315934406010559831118728393600729754696197287367516085911467577599, 24, 184);
        _delay(470225);
        Tester.setOraclePrice(77582300576830466453075691596404188584748490994939435135302067080342193196030, 90);
        _setUpActor(0x0000000000000000000000000000000000010000);
        _delay(569113);
        Tester.decreaseReceiveAllowance(340282366920938466736669620603648076104, 232, 75);
        _delay(588254);
        Tester.deposit(599290588, 86, 12, 63);
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(10);
        Tester.repayShares(115792089237316195423570985008687907853269984665640564039457584004742150441560, 38, 86);
        _setUpActor(0x0000000000000000000000000000000000030000);
        _delay(455315);
        Tester.accrueInterestForSilo(67);
        _delay(239463);
        Tester.accrueInterest(16);
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(22081);
        Tester.liquidationCall(
            109807634294782696810562174246184011880214236157589859467409674525447747405626,
            true,
            RandomGenerator(7, 42, 85)
        );
        _setUpActor(0x0000000000000000000000000000000000030000);
        _delay(129961);
        Tester.accrueInterestForBothSilos();
        _delay(501740);
        Tester.accrueInterest(55);
        _delay(575787);
        Tester.transitionCollateral(0, 88, 15, 128);
        _setUpActor(0x0000000000000000000000000000000000010000);
        _delay(189583);
        Tester.transfer(115792089237316195423570985008687907852929702298719625569447619374137601667694, 5, 223);
        _setUpActor(0x0000000000000000000000000000000000030000);
        _delay(351915);
        Tester.repayShares(59359157251673724416123983477891978307480626504898430505021689386564451036057, 254, 155);
        _delay(968096);
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(175021);
        Tester.decreaseReceiveAllowance(1000000000000000000, 1, 1);
        _setUpActor(0x0000000000000000000000000000000000030000);
        _delay(131401);
        Tester.accrueInterest(106);
        _setUpActor(0x0000000000000000000000000000000000010000);
        _delay(556689);
        Tester.accrueInterestForBothSilos();
        _delay(322338);
        Tester.borrow(36724222950108460943225092704090602497791403457447818971628160747441110554774, 20, 48);
        _setUpActor(0x0000000000000000000000000000000000030000);
        _delay(190838);
        Tester.approve(5879418642321189445, 1, 9);
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(89476);
        Tester.borrow(6066618555171861080641399225834821479264312876460073771621860237610701889387, 209, 25);
        _delay(48157);
        Tester.borrowShares(127222367069660252149585818270108720, 9, 36);
        _setUpActor(0x0000000000000000000000000000000000010000);
        _delay(159643);
        Tester.switchCollateralToThisSilo(163);
        _delay(369793);
        Tester.increaseReceiveAllowance(
            12807004791468022229760724144208873021172908340450812437025763341919460035677, 129, 242
        );
        _delay(318198);
        Tester.borrow(1578716033565364729758376939305657250036726387367984538676783409026341008686, 114, 71);
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(433726);
        Tester.setReceiveApproval(340284166438660709872813645066166128557, 55, 129);
        _delay(166184);
        _delay(67230);
        Tester.transfer(115792089237316195423570985008687907852929702298719625569447619374137601667694, 5, 223);
        _setUpActor(0x0000000000000000000000000000000000030000);
        _delay(322309);
        Tester.transfer(115792089237316195423570985008687907853269984665635612279300442486813533143040, 28, 120);
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(195581);
        Tester.repayShares(214725222890521617758536210082592503312, 100, 128);
        _setUpActor(0x0000000000000000000000000000000000010000);
        _delay(320326);
        Tester.accrueInterestForSilo(72);
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(363400);
        Tester.increaseReceiveAllowance(
            37449573255737532388162748482975926144817115504322750846963424805476254487725, 63, 251
        );
        _delay(348683);
        Tester.deposit(115792089237316195423570985008687907853269984665640564039457584007913129639933, 11, 73, 29);
        _setUpActor(0x0000000000000000000000000000000000010000);
        _delay(563855);
        Tester.accrueInterestForSilo(0);
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(146806);
        Tester.borrowSameAsset(115792089237316195423570985008687907853269984665640564039397789302205157117674, 99, 31);
        _delay(100835);
        Tester.switchCollateralToThisSilo(133);
        _delay(459514);
        _delay(38059);
        Tester.borrowShares(115792089237316195423570985008687907853269984665640564039457584007807430333323, 13, 11);
        _setUpActor(0x0000000000000000000000000000000000010000);
        _delay(403354);
        Tester.setOraclePrice(67691907686015322716718586261470932794317018227571230303671188710419629257228, 13);
        _delay(400981);
        Tester.liquidationCall(
            73422475067198456244435178146920045574053031087905178094970006216781796455381,
            false,
            RandomGenerator(169, 197, 8)
        );
        _setUpActor(0x0000000000000000000000000000000000030000);
        _delay(27);
        Tester.approve(115792089237316195423570985008687907853269984665640564039457584007910231963627, 66, 234);
        _setUpActor(0x0000000000000000000000000000000000010000);
        _delay(389578);
        Tester.deposit(49419288659011079077333232149352470705732592839665488559338401028231434802925, 255, 28, 255);
        _delay(81681);
        _delay(428919);
        Tester.borrow(115792089237316195423570985008687907853269984665640564039457584007913129631744, 206, 194);
        _delay(336898);
        _delay(240693);
        Tester.borrowSameAsset(49713788644151881165271464617596982483132240797551243266086776357382572301246, 32, 223);
        _delay(207289);
        Tester.borrowSameAsset(120898687620461591923412442393576469504, 54, 244);
        _setUpActor(0x0000000000000000000000000000000000030000);
        _delay(190838);
        Tester.increaseReceiveAllowance(
            74765590316438721873018290148271937701985588262012052597345626980822317483263, 161, 67
        );
        _setUpActor(0x0000000000000000000000000000000000010000);
        _delay(438648);
        Tester.accrueInterestForBothSilos();
        _setUpActor(0x0000000000000000000000000000000000030000);
        _delay(26862);
        Tester.approve(9999999999999999999999999999999999999999999999999999999999999999, 155, 36);
        _setUpActor(0x0000000000000000000000000000000000010000);
        _delay(246869);
        Tester.receiveAllowance(3574117791, 180, 53, 0);
        _delay(18);
        Tester.borrowSameAsset(
            115792089237316195423570985008687907853269984665640564039457584007909468367567, 214, 161
        );
        _setUpActor(0x0000000000000000000000000000000000030000);
        _delay(540358);
        Tester.increaseReceiveAllowance(
            115792089237316195423570985008687907853269984665640564039457584007913129639934, 37, 251
        );
        _delay(326328);
        _delay(8);
        Tester.borrow(27, 161, 240);
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(436474);
        Tester.accrueInterest(131);
        _delay(50417);
        Tester.repayShares(2161390447, 67, 98);
        _setUpActor(0x0000000000000000000000000000000000010000);
        _delay(511295);
        Tester.liquidationCall(
            115792089237316195423570985008687907853269984665640564039457584007910231963626,
            false,
            RandomGenerator(5, 80, 17)
        );
        _setUpActor(0x0000000000000000000000000000000000030000);
        _delay(252162);
        Tester.decreaseReceiveAllowance(
            9568823943614153330766966274207598800173600903796480105747089624325897293061, 250, 31
        );
        _delay(448590);
        Tester.setOraclePrice(115792089237316195423570985008687907853269984665640564039457584007913129639932, 84);
        _delay(552454);
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(181541);
        Tester.assert_LENDING_INVARIANT_B(86, 36);
        _delay(415882);
        Tester.transfer(56153006547301922212913189229789469573423388616307497969158021673504500082640, 12, 31);
        _setUpActor(0x0000000000000000000000000000000000030000);
        _delay(101900);
        Tester.accrueInterestForSilo(87);
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(478926);
        Tester.accrueInterest(18);
        _setUpActor(0x0000000000000000000000000000000000010000);
        _delay(406307);
        Tester.withdraw(1851080550, 172, 5, 0);
        _setUpActor(0x0000000000000000000000000000000000030000);
        _delay(447588);
        Tester.borrowSameAsset(1, 0, 1);
        _setUpActor(0x0000000000000000000000000000000000010000);
        _delay(511294);
        Tester.deposit(0, 14, 243, 166);
        _setUpActor(0x0000000000000000000000000000000000030000);
        _delay(322290);
        Tester.mint(580836077360653463743629447964978, 0, 0, 0);
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(577105);
        Tester.setReceiveApproval(1645187384, 152, 45);
        _delay(49);
        Tester.repay(53742163955968699238224592419723006218102467532425302932185977343562586437458, 199, 190);
        _delay(322215);
        Tester.liquidationCall(1532892064, false, RandomGenerator(1, 137, 85));
        _delay(239462);
        Tester.withdraw(119, 209, 255, 99);
        _setUpActor(0x0000000000000000000000000000000000010000);
        _delay(322343);
        Tester.accrueInterestForSilo(11);
        _setUpActor(0x0000000000000000000000000000000000030000);
        _delay(207836);
        Tester.receiveAllowance(1931201473587441286672108131041662996346628547715171313136108303788292, 197, 85, 9);
        _setUpActor(0x0000000000000000000000000000000000010000);
        _delay(64406);
        Tester.setReceiveApproval(29289623615802995855220090498792232920215927702751398553886470805633165141864, 0, 17);
        _setUpActor(0x0000000000000000000000000000000000030000);
        _delay(160282);
        Tester.borrow(946, 58, 5);
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(54);
        Tester.assert_BORROWING_HSPOST_D(47, 86);
        _delay(262803);
        Tester.switchCollateralToThisSilo(253);
        _setUpActor(0x0000000000000000000000000000000000030000);
        _delay(414579);
        Tester.repayShares(42665267959266855317290551046407, 57, 15);
        _delay(169264);
        _delay(322338);
        Tester.receiveAllowance(
            115792089237316195423570985008687907853269984665640564039457584007912955441986, 20, 196, 6
        );
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(498256);
        Tester.repayShares(4193309795, 0, 113);
        _delay(908757);
        _setUpActor(0x0000000000000000000000000000000000030000);
        _delay(159643);
        Tester.repay(846, 48, 48);
        _delay(566708);
        _delay(82911);
        Tester.assert_BORROWING_HSPOST_D(37, 3);
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(322286);
        Tester.borrow(115792089237316195423570985008687907853269984665640564039457584007913129639931, 31, 34);
        _setUpActor(0x0000000000000000000000000000000000030000);
        _delay(97913);
        Tester.decreaseReceiveAllowance(1646402720, 244, 3);
        _delay(11);
        Tester.withdraw(845, 233, 67, 173);
        _delay(418019);
        _delay(146806);
        Tester.mint(80196747776073781412340780282827993262833827985573428884754254162638007018690, 235, 232, 163);
        _delay(538244);
        Tester.decreaseReceiveAllowance(
            84813201771026945638173333336038831044201189791070506173606087138877644016073, 2, 189
        );
        _setUpActor(0x0000000000000000000000000000000000010000);
        _delay(447588);
        Tester.borrowShares(47906606336149663595827510320332880781376278612660954476138465428799845351944, 84, 86);
        _delay(435020);
        _delay(181540);
        Tester.setDaoFee(3574117791, 24999999999999999);
        _delay(695808);
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(64408);
        Tester.accrueInterestForBothSilos();
        _setUpActor(0x0000000000000000000000000000000000010000);
        _delay(300296);
        Tester.repay(354, 25, 250);
        _delay(128966);
        Tester.borrowShares(887008755, 255, 31);
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(322319);
        Tester.decreaseReceiveAllowance(
            115792089237316195423570985008687907853269984665640564039457584007913029639935, 49, 5
        );
        _setUpActor(0x0000000000000000000000000000000000010000);
        _delay(389488);
        Tester.setReceiveApproval(
            48380439115471823130037425264667058579896200088577359041559891494655114509910, 87, 203
        );
        _setUpActor(0x0000000000000000000000000000000000030000);
        _delay(206186);
        Tester.assertBORROWING_HSPOST_F(136, 137);
        _delay(372377);
        Tester.assert_LENDING_INVARIANT_B(20, 0);
        _delay(301119);
        Tester.switchCollateralToThisSilo(19);
        _delay(65);
        Tester.redeem(115792089237316195423570985008687907853269984665640564039457584007912242631182, 27, 15, 252);
        _delay(49779);
        Tester.accrueInterestForSilo(125);
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(322312);
        Tester.withdraw(6746181831396333889900270812628694992573943683023047998416904728090836502528, 214, 66, 219);
        _setUpActor(0x0000000000000000000000000000000000030000);
        _delay(505001);
        Tester.redeem(26006152056442779851617529938341254545212820044103721190339075299318900977759, 1, 87, 254);
        _setUpActor(0x0000000000000000000000000000000000010000);
        _delay(350071);
        Tester.redeem(57941686887160283438772995816514421455634477373019017165188999239496250035030, 218, 141, 119);
        _delay(303345);
        Tester.accrueInterest(13);
        _setUpActor(0x0000000000000000000000000000000000030000);
        _delay(536461);
        Tester.assert_BORROWING_HSPOST_D(8, 30);
        _delay(131539);
        Tester.accrueInterestForSilo(136);
        _delay(554800);
        Tester.assertBORROWING_HSPOST_F(0, 1);
        _setUpActor(0x0000000000000000000000000000000000010000);
        _delay(276465);
        Tester.approve(8676917996133621485963055270439498686793861085940407004179885995936313170006, 86, 58);
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(89);
        Tester.approve(17814907409653703713742307, 37, 66);
        _setUpActor(0x0000000000000000000000000000000000030000);
        _delay(79820);
        Tester.approve(5878623614256507594275124645717695763639139257454428161, 84, 125);
        _delay(240694);
        Tester.deposit(4193309796, 16, 223, 34);
        _setUpActor(0x0000000000000000000000000000000000010000);
        _delay(343593);
        Tester.receiveAllowance(
            88359917902126231531745407958649907959050173009667553884831731349891080003537, 250, 68, 84
        );
        _delay(385872);
        Tester.repayShares(53533613118868578806208725059468219569022399124723098496516221191738597010994, 251, 26);
        _delay(540358);
        Tester.accrueInterestForBothSilos();
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(311699);
        Tester.assert_BORROWING_HSPOST_D(112, 40);
        _setUpActor(0x0000000000000000000000000000000000010000);
        _delay(95199);
        Tester.repay(10000000000000001, 135, 124);
        _setUpActor(0x0000000000000000000000000000000000030000);
        _delay(1);
        Tester.accrueInterest(121);
        _setUpActor(0x0000000000000000000000000000000000010000);
        _delay(16);
        Tester.accrueInterest(254);
        _delay(199402);
        _delay(463587);
        Tester.borrowSameAsset(174197950, 243, 0);
        _setUpActor(0x0000000000000000000000000000000000030000);
        _delay(295513);
        Tester.repayShares(28, 3, 41);
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(27279);
        Tester.switchCollateralToThisSilo(242);
        _setUpActor(0x0000000000000000000000000000000000030000);
        _delay(3867);
        Tester.assert_LENDING_INVARIANT_B(120, 105);
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(427371);
        Tester.assertBORROWING_HSPOST_F(60, 31);
        _setUpActor(0x0000000000000000000000000000000000030000);
        _delay(227175);
        Tester.transferFrom(0, 198, 253, 44);
        _delay(444108);
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(126793);
        Tester.transfer(115792089237316195423570985008687907853269984665640564039457584007913129639931, 218, 254);
        _setUpActor(0x0000000000000000000000000000000000010000);
        _delay(258514);
        Tester.transferFrom(
            38136762404825557505972796430232187626484082939863888799221115397360185852834, 110, 85, 214
        );
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(436472);
        Tester.borrowSameAsset(1, 0, 1);
        _setUpActor(0x0000000000000000000000000000000000030000);
        _delay(45910);
        Tester.repayShares(115792089237316195423570985008687907853269984665640564039457584007913129639931, 187, 41);
        _setUpActor(0x0000000000000000000000000000000000010000);
        _delay(427370);
        Tester.accrueInterestForSilo(89);
        _setUpActor(0x0000000000000000000000000000000000030000);
        _delay(102108);
        Tester.switchCollateralToThisSilo(13);
        _setUpActor(0x0000000000000000000000000000000000010000);
        _delay(239464);
        Tester.borrow(40262356398096892250256901328967005465833953446526533261551950609145738646486, 182, 34);
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(187975);
        Tester.assert_SILO_HSPOST_D(119);
        _setUpActor(0x0000000000000000000000000000000000030000);
        _delay(590277);
        Tester.receiveAllowance(
            72587842292139726604095693247859257094137709260660475411207098853856399402351, 201, 3, 188
        );
        _setUpActor(0x0000000000000000000000000000000000010000);
        _delay(322338);
        Tester.borrowShares(115792089237316195423570985008687907853269984665640564039457584007911581187283, 64, 56);
        _delay(322341);
        Tester.repay(0, 73, 44);
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(195581);
        Tester.decreaseReceiveAllowance(4193309794, 189, 223);
        _setUpActor(0x0000000000000000000000000000000000010000);
        _delay(499805);
        Tester.borrowSameAsset(13199850581272513550760351455146300579216838661645271003246065306087952493449, 185, 55);
        _setUpActor(0x0000000000000000000000000000000000030000);
        _delay(537687);
        Tester.liquidationCall(
            3290418955343319657953518573988768051667982968205162263729519789742093322906,
            true,
            RandomGenerator(59, 100, 87)
        );
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(45911);
        Tester.accrueInterestForBothSilos();
        _setUpActor(0x0000000000000000000000000000000000010000);
        _delay(516958);
        Tester.transitionCollateral(382803075057863631967055496682562684191802060867946303, 189, 11, 162);
        _setUpActor(0x0000000000000000000000000000000000030000);
        _delay(64);
        Tester.decreaseReceiveAllowance(
            51777343349534698480399220799565262681725023978988783723510411441860670030327, 89, 29
        );
        _delay(20);
        Tester.borrow(9542157733397949904543534427795128558241018864227869878248436101427734225157, 252, 37);
        _delay(410218);
        _delay(322360);
        Tester.repayShares(1851080548, 120, 149);
        _delay(435020);
        Tester.accrueInterestForSilo(128);
        _delay(499965);
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(322334);
        Tester.liquidationCall(
            96232146183591525884648892627556896825454148100868005410562164076324947719208,
            true,
            RandomGenerator(16, 127, 57)
        );
        _setUpActor(0x0000000000000000000000000000000000030000);
        _delay(24867);
        Tester.liquidationCall(
            82168112026324831290910770391721026417902730907746593283134283304893643508096,
            true,
            RandomGenerator(176, 7, 221)
        );
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(322374);
        Tester.redeem(99518934667993974135382564584014858316363709340836549902178770321854717310299, 218, 251, 11);
        _setUpActor(0x0000000000000000000000000000000000030000);
        _delay(415353);
        Tester.accrueInterestForBothSilos();
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(227175);
        Tester.setReceiveApproval(
            115792089237316195423570985008687907853269984665640564039457584007913129639932, 207, 16
        );
        _setUpActor(0x0000000000000000000000000000000000010000);
        _delay(289103);
        Tester.withdraw(973, 88, 179, 228);
        _setUpActor(0x0000000000000000000000000000000000030000);
        _delay(406887);
        Tester.decreaseReceiveAllowance(17245192640981011205389128006696426470461, 150, 32);
        _delay(499804);
        Tester.borrow(59229306857444107866747981846948207767806472335378037510488100939983314086635, 12, 109);
        _delay(1558604);
        _delay(297507);

        console.log("Test completed");
        Tester.deposit(511, 129, 205, 40);
    }

    function test_replay_assert_BORROWING_HSPOST_F() public {
        //@audit-issue
        _setUpActor(0x0000000000000000000000000000000000010000);
        _delay(193410);
        Tester.mint(2417851639229258349412351, 9, 212, 221);
        _delay(14);
        Tester.deposit(100000000000000000000000000000001, 118, 6, 4);
        Tester.mint(2417851639229258349412351, 9, 212, 225);
        _delay(512439);
        Tester.deposit(69444444444443, 8, 119, 239);
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(510590);
        Tester.deposit(499999999999999999, 57, 2, 13);
        _setUpActor(0x0000000000000000000000000000000000010000);
        _delay(322274);
        Tester.setOraclePrice(85325694741497293970114900540325703882142136582466790768881058534661869607342, 174);
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(24867);
        Tester.setOraclePrice(43207562170869945412787795144717286439709176267592715576009429839015455091837, 113);
        _delay(55);
        Tester.assertBORROWING_HSPOST_F(56, 215);
        _setUpActor(0x0000000000000000000000000000000000010000);
        _delay(390717);
        Tester.transferFrom(2897676309, 29, 40, 12);
        _delay(126793);
        _delay(499805);
        Tester.borrowShares(50228011671950330309169572203707085386011832257117795315954720092389856076046, 1, 20);
        _delay(568303);
        Tester.redeem(44941986255502561297318478138867417946571817659141510774328760729431238239191, 10, 63, 11);
        _delay(537598);
        Tester.setReceiveApproval(
            54240591665615479792438906247194233447669730656649631639278775344414187956629, 130, 38
        );
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(370487);
        Tester.approve(58683455561554494632124242960254730942971379018831365076494610077263994922018, 48, 34);
        _delay(3867);
        _delay(537687);
        Tester.borrow(4422950546145201694882358831063848405430339188834070564158780592703015551971, 4, 40);
        _setUpActor(0x0000000000000000000000000000000000010000);
        _delay(389576);
        Tester.borrowShares(3744612559021541957160054071969076782, 0, 145);
        _delay(370488);
        _delay(114541);
        Tester.borrowSameAsset(9427610262719372917047848554186210596955247207389145729765261707856625335925, 3, 82);
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(436727);
        Tester.increaseReceiveAllowance(68, 60, 108);
        _setUpActor(0x0000000000000000000000000000000000010000);
        _delay(91011);
        Tester.redeem(828288516, 64, 28, 89);
        _delay(240693);
        Tester.setOraclePrice(52915718629196049451388510361446452516620029081340442233617707039992909407707, 152);
        _delay(452190);
        Tester.borrowSameAsset(237, 180, 8);
        _delay(95198);
        Tester.switchCollateralToThisSilo(45);
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(18);
        Tester.withdraw(38133102091987032070981629283273601378239912397744651828825688961937124872721, 66, 119, 243);
        _delay(419558);
        _setUpActor(0x0000000000000000000000000000000000010000);
        Tester.accrueInterestForSilo(225);
        _delay(303440);
        Tester.repay(115792089237316195423570985008687907853269984665640564039457584007913129639933, 147, 138);
        _delay(20);
        Tester.decreaseReceiveAllowance(
            42271708428702437162045281838654932472332677825614504426711854969248495003551, 0, 29
        );
        _delay(209930);
        Tester.borrow(24435290935346342347589214797042234990314080549446825362120725011266203001993, 85, 7);
        _delay(568302);
        Tester.repayShares(115792089237316195423570985008687907853269984665640564039457584007913129639931, 218, 116);
        Tester.mint(52169554911342614736952778091147, 0, 4, 158);
        _delay(350071);
        Tester.mint(95070932812866402748192169330481, 2, 89, 21);
        Tester.assertBORROWING_HSPOST_F(3, 9);
    }

    function test_replay_transitionCollateral() public {
        //@audit-issue
        _setUpActor(0x0000000000000000000000000000000000010000);
        Tester.mint(1197289752, 0, 0, 1);
        Tester.borrowSameAsset(666462, 0, 0);
        _delay(8);
        Tester.liquidationCall(
            92376606079425577106588961289845324639688828464328356647373507302383077493937,
            false,
            RandomGenerator(34, 37, 29)
        );
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(537688);
        Tester.switchCollateralToThisSilo(119);
        _delay(2);
        _delay(303757);
        Tester.accrueInterest(6);
        _delay(322310);
        Tester.withdraw(115792089237316195423570985008687907853269984665640564039457584007913129639931, 1, 119, 160);
        _setUpActor(0x0000000000000000000000000000000000010000);
        _delay(434894);
        Tester.repay(136, 5, 21);
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(195123);
        Tester.borrowSameAsset(102750900109441762338823263821223164621313590537445587886855167060081089416903, 87, 135);
        _delay(427371);
        Tester.accrueInterest(178);
        _setUpActor(0x0000000000000000000000000000000000030000);
        _delay(424755);
        Tester.increaseReceiveAllowance(63, 31, 49);
        _setUpActor(0x0000000000000000000000000000000000010000);
        _delay(322256);
        Tester.repayShares(34, 30, 251);
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(322286);
        Tester.accrueInterestForBothSilos();
        _delay(466841);
        _setUpActor(0x0000000000000000000000000000000000010000);
        _delay(190836);
        Tester.receiveAllowance(
            67879026546791232335401397295928718266148622969132955181092061957730287594974, 141, 146, 54
        );
        _setUpActor(0x0000000000000000000000000000000000030000);
        _delay(10674);
        Tester.assert_BORROWING_HSPOST_D(253, 85);
        _setUpActor(0x0000000000000000000000000000000000010000);
        _delay(306997);
        Tester.borrowSameAsset(21585613697354954902898453804133624968432917054401443086730666018432324372553, 1, 27);
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(22080);
        Tester.mint(93646602918060477136800477714624610914049052709935395894375273044702306602463, 91, 160, 4);
        _setUpActor(0x0000000000000000000000000000000000010000);
        _delay(519847);
        Tester.deposit(9624075175388396098104258216271404880752482209615601192127206862564779763991, 67, 16, 136);
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(36);
        Tester.approve(115792089237316195423570985008687907853269984665640564039457434007913129639937, 160, 163);
        _setUpActor(0x0000000000000000000000000000000000030000);
        _delay(190836);
        Tester.deposit(850000000000000001, 91, 190, 12);
        _delay(414579);
        Tester.receiveAllowance(999999999999999999, 1, 162, 253);
        _delay(588255);
        Tester.assertBORROWING_HSPOST_F(164, 35);
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(243805);
        Tester.setOraclePrice(63175501356154510779854281709278062873128985787959537881584842995235862408423, 229);
        _delay(3867);
        Tester.mint(83027090415153426737556317870318965479485907605649508132829330970971093388044, 46, 131, 197);
        _delay(537688);
        Tester.deposit(115792089237316195423570985008687907853269984665640564039457584007911596747873, 48, 146, 13);
        _delay(3865);
        _delay(332369);
        Tester.redeem(115696897690052895286399291642729438185136418481807235877070495890283110725393, 0, 68, 86);
        _setUpActor(0x0000000000000000000000000000000000030000);
        _delay(385873);
        Tester.setOraclePrice(83384416244348501179099460970931716627069069609758431118822185425433146818470, 56);
        _delay(405856);
        _delay(64407);
        Tester.flashLoan(789, 1000000000000000000000000000000, 87, 141);
        _delay(428920);
        Tester.mint(115792089237316195423570985008687907853269984665640564039457559007913129639935, 202, 40, 19);
        _delay(159);
        Tester.setDaoFee(99, 9999999999);
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(150736);
        Tester.accrueInterestForBothSilos();
        _setUpActor(0x0000000000000000000000000000000000010000);
        _delay(82672);
        Tester.repay(61270666630293674668380796705131752310548198689411997177078758471100742839675, 226, 201);
        _setUpActor(0x0000000000000000000000000000000000030000);
        _delay(251325);
        Tester.decreaseReceiveAllowance(
            115792089237316195423570985008687907853269984665640564039457584007913129639929, 161, 241
        );
        _setUpActor(0x0000000000000000000000000000000000010000);
        _delay(2);
        Tester.increaseReceiveAllowance(2835717307, 242, 54);
        _delay(600848);
        Tester.redeem(115792089237316195423570985008687907852929702298719196538670242665374803829242, 63, 21, 8);
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(295513);
        Tester.borrowSameAsset(48064507900596314567628153981727950698207055150846498568362492192054574943706, 57, 11);
        _setUpActor(0x0000000000000000000000000000000000010000);
        _delay(295513);
        Tester.mint(1645187383, 65, 203, 64);
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(52934);
        Tester.accrueInterest(32);
        _setUpActor(0x0000000000000000000000000000000000030000);
        _delay(89);
        Tester.approve(63736002375795722402532023601167000453146129629797850313132499043700200495369, 0, 160);
        _delay(257969);
        Tester.repay(887008753, 18, 219);
        _delay(169263);
        Tester.accrueInterestForSilo(203);
        _delay(195582);
        Tester.transfer(10305733602818994360878499694173399856229685277777434977694285471670450949993, 61, 255);
        _delay(49781);
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(498257);
        Tester.withdraw(115792089237316195423570985008687907853269984665640564039457584007913129639931, 151, 253, 9);
        _delay(175570);
        Tester.accrueInterestForBothSilos();
        _delay(415881);
        Tester.mint(115792089237316195423570985008687907853269984665640564039457559007913129639935, 202, 40, 28);
        _delay(175569);
        Tester.decreaseReceiveAllowance(
            86033374192268632842155156008275118788430627337550318165948572826243408976079, 89, 120
        );
        _delay(190836);
        Tester.repay(66814415143154679173915046722655439075120825244378316994010404351618995951169, 54, 57);
        _delay(314384);
        _setUpActor(0x0000000000000000000000000000000000030000);
        _delay(474987);
        Tester.receiveAllowance(
            50795184966779784027603036522320549979505304570834191087533964097607569954327, 50, 234, 16
        );
        _setUpActor(0x0000000000000000000000000000000000010000);
        _delay(326328);
        Tester.liquidationCall(39983289040657910432720271928938050518363, true, RandomGenerator(32, 86, 68));
        _delay(150737);
        Tester.receiveAllowance(
            78751624497308038607439927082797635216803971294347223466850498631676761763090, 145, 10, 65
        );
        _delay(762853);
        _delay(578493);
        Tester.switchCollateralToThisSilo(115);
        _setUpActor(0x0000000000000000000000000000000000030000);
        _delay(297507);
        Tester.redeem(103292542714901428212749899392399784293332632033598272698868677540937841349969, 156, 137, 55);
        _setUpActor(0x0000000000000000000000000000000000010000);
        _delay(322327);
        Tester.assert_SILO_HSPOST_D(12);
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(322309);
        Tester.decreaseReceiveAllowance(
            115792089237316195423570985008687907853269984665640564039457584007913129639933, 52, 32
        );
        _delay(466841);
        Tester.borrow(111857468998492536781144493436727280058541974475885968952276151962020287221554, 35, 38);
        _delay(7993);
        Tester.approve(4204136582279055683284325446937663413913789881274168253584260281692362676021, 9, 8);
        _delay(30);
        Tester.accrueInterestForBothSilos();
        _delay(389577);
        Tester.receiveAllowance(
            80824454834511420687758967569877893054007441392552707767302417748861012136828, 35, 89, 175
        );
        _setUpActor(0x0000000000000000000000000000000000010000);
        _delay(322274);
        Tester.borrowSameAsset(20147076027434589744787435822140337909775978096308948447385191221415469831626, 201, 225);
        _delay(322291);
        Tester.assertBORROWING_HSPOST_F(49, 10);
        _delay(215940);
        Tester.accrueInterestForBothSilos();
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(322255);
        Tester.transfer(115792089237316195423570985008687907852865318453788217445206590704255894163987, 67, 202);
        _setUpActor(0x0000000000000000000000000000000000010000);
        _delay(54939);
        Tester.deposit(300000000000000000, 136, 169, 48);
        _delay(2591);
        _setUpActor(0x0000000000000000000000000000000000030000);
        _delay(34);
        Tester.switchCollateralToThisSilo(41);
        _delay(54939);
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(452492);
        Tester.borrowSameAsset(2547025546513014238365418645791225841947781966568527851471940416871239751876, 49, 93);
        _setUpActor(0x0000000000000000000000000000000000010000);
        _delay(135879);
        Tester.accrueInterest(212);
        _setUpActor(0x0000000000000000000000000000000000030000);
        _delay(442677);
        Tester.assert_BORROWING_HSPOST_D(23, 36);
        _setUpActor(0x0000000000000000000000000000000000010000);
        _delay(2);
        Tester.accrueInterestForSilo(64);
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(314382);
        Tester.transfer(115792089237316195423570985008687907852865318453788217445206590704255894163987, 67, 202);
        _delay(322347);
        Tester.transfer(115792089237316195423570985008687907852865318453788217445206590704255894163987, 67, 202);
        _delay(390247);
        Tester.assert_BORROWING_HSPOST_D(101, 19);
        _setUpActor(0x0000000000000000000000000000000000030000);
        _delay(526880);
        Tester.borrowSameAsset(24900104684468280764509599872421672333601370005009598846076454071969943549876, 63, 175);
        _delay(190836);
        Tester.mint(115792089237316195423570985008687907853269984665640564039457559007913129639935, 202, 40, 19);
        _delay(490703);
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(185532);
        Tester.transitionCollateral(1524785992, 7, 136, 158);
    }

    ///////////////////////////////////////////////////////////////////////////////////////////////
    //                                     INVARIANTS REPLAY                                     //
    ///////////////////////////////////////////////////////////////////////////////////////////////

    function test_replayechidna_BASE_INVARIANT() public {
        Tester.setOraclePrice(154174253363420274135519693994558375770505353341038094319633, 1);
        Tester.setOraclePrice(117361312846819359113791019924540616345894207664659799350103, 0);
        Tester.mint(1025, 0, 1, 0);
        Tester.deposit(1, 0, 0, 1);
        Tester.borrowShares(1, 0, 0);
        echidna_BASE_INVARIANT();
        Tester.setOraclePrice(1, 1);
        echidna_BASE_INVARIANT();
    }

    // FOUNDRY_PROFILE=core_test forge test -vv --ffi --mt test_replayechidna_LENDING_INVARIANT
    function test_replayechidna_LENDING_INVARIANT() public {
        Tester.deposit(1, 0, 0, 1);
        echidna_LENDING_INVARIANT();
    }

    function test_replayechidna_BORROWING_INVARIANT2() public {
        Tester.mint(1, 0, 0, 1);
        Tester.deposit(1, 0, 0, 1);
        Tester.assert_LENDING_INVARIANT_B(0, 1);
        echidna_BORROWING_INVARIANT();
    }

    function test_replayechidna_BASE_INVARIANT2() public {
        Tester.mint(1, 0, 1, 1);
        Tester.deposit(1, 0, 1, 1);
        Tester.assert_LENDING_INVARIANT_B(1, 1);
        echidna_BASE_INVARIANT();
    }

    function test_echidna_BASE_INVARIANT2() public {
        this.borrowShares(30200315428657041181692818570648842165065568767143529577951521503506330530609, 0, 62);
        _delay(297507);
        this.borrow(24676309369365446429188617450178, 153, 172);
        _delay(18525);
        this.increaseReceiveAllowance(
            99660895124953974644233210972242386669999403047765480327126411789742549576368, 181, 91
        );
        _delay(141692);
        this.repay(101372206747301271834761305009245902947872462179580934218127627924045863531744, 9, 159);
        _delay(367974);
        this.borrowShares(8032312716394233662712281686181593822882968583701061059278525601052468728207, 218, 2);
        _delay(1167988 + 437307);
        this.increaseReceiveAllowance(371080552416919877990254144423618836769, 99, 5);
        _delay(390117);
        this.redeem(59905965166056961781632000159517596677870250320753863880326268500874116007290, 31, 0, 37);
        _delay(12433);
        this.borrowSameAsset(6827332602758654332354477904142168468488799183670823563697384434166987337716, 1, 5);
        _delay(324745 + 555411);
        this.accrueInterest(61);
        _delay(563776);
        this.borrowSameAsset(6761450672746141936113668479670284573524169850700252331526405092555618758321, 2, 10);
        _delay(385872 + 456951);
        this.setDaoFee(0, 2877132025);
        _delay(31082);
        this.repayShares(32472179111736603803505870944287, 4, 22);
        _delay(174548);
        this.receiveAllowance(91469683133036834644101184730609374679152313976056066054005700, 150, 17, 116);
        _delay(276464);
        this.decreaseReceiveAllowance(0, 5, 0);
        _delay(520753);
        this.setOraclePrice(151115727451828646838273, 23);
        _delay(58873);
        this.decreaseReceiveAllowance(424412765956835803999046, 41, 16);
        _delay(237655);
        this.repay(2716659549, 19, 123);
        _delay(50346);
        this.setOraclePrice(16157129571321233639644349780651112871298492558603692980126389590854127811494, 165);
        _delay(189582);
        this.withdraw(4164541715857873049718334791601233354128474156253387690275982252087686776267, 29, 29, 30);
        _delay(1168790 + 318278);
        this.accrueInterestForBothSilos();
        this.assert_BORROWING_HSPOST_D(0, 0);
        _delay(348683);
        this.assert_LENDING_INVARIANT_B(0, 21);
        echidna_BASE_INVARIANT();
    }

    function test_echidna_BORROWING_INVARIANT() public {
        _setUpActorAndDelay(USER2, 203047);
        this.setOraclePrice(75638385906155076883289831498661502101511673487426594778361149796941034811732, 64);
        _setUpActorAndDelay(USER1, 3032);
        this.deposit(77844067395127635960841998878023, 20, 55, 57);
        _setUpActorAndDelay(USER1, 86347);
        this.deposit(774, 25, 0, 211);
        _setUpActorAndDelay(USER2, 114541);
        this.assertBORROWING_HSPOST_F(211, 8);
        _setUpActorAndDelay(USER1, 487078);
        this.setOraclePrice(115792089237316195423570985008687907853269984665640562830531764393283954933761, 0);
        echidna_BORROWING_INVARIANT();
    }

    ///////////////////////////////////////////////////////////////////////////////////////////////
    //                                   POSTCONDITIONS REPLAY                                   //
    ///////////////////////////////////////////////////////////////////////////////////////////////

    function test_withdrawEchidna() public {
        Tester.mint(261704911235117686095, 3, 22, 5);
        Tester.setOraclePrice(5733904121326457137913237185177414188002932016538715575300939815758706, 1);
        Tester.mint(315177161663537856181160994225, 0, 1, 3);
        Tester.borrowShares(1, 0, 0);
        Tester.setOraclePrice(5735839262457902375842327974553553747246352514262698977554375720302080, 0);
        Tester.withdraw(1238665, 0, 0, 1);
    }

    function test_depositEchidna() public {
        Tester.deposit(1, 0, 0, 0);
    }

    function test_flashLoanEchidna() public {
        Tester.flashLoan(1, 76996216303583, 0, 0);
    }

    function test_transitionCollateralEchidna() public {
        Tester.transitionCollateral(0, 0, 0, 0);
    }

    function test_liquidationCallEchidna() public {
        Tester.mint(10402685166958480039898380057, 0, 0, 1);
        Tester.deposit(1, 0, 1, 1);
        Tester.setOraclePrice(32922152482718336970808482575712338131227045040770117410308, 1);
        Tester.borrowShares(1, 0, 0);
        Tester.setOraclePrice(1, 1);
        Tester.liquidationCall(
            1179245955276247436741786656479833618730492640882500598892, false, RandomGenerator(0, 0, 1)
        );
    }

    function test_replayBorrowSameAsset() public {
        Tester.mint(146189612359507306544594, 0, 0, 1);
        Tester.borrowSameAsset(1, 0, 0);
        Tester.mint(2912, 0, 1, 0);
        Tester.setOraclePrice(259397900503974518365051033297974490300799102382829890910371, 1);
        Tester.switchCollateralToThisSilo(1);
        Tester.setOraclePrice(0, 1);
        Tester.borrowSameAsset(1, 0, 0);
    }

    function test_replayBorrowNotSolvent() public {
        Tester.mint(3757407288159739, 0, 0, 0);
        Tester.mint(90935896182375204709, 1, 0, 1);
        Tester.borrowSameAsset(1567226244662, 0, 0);
        Tester.assert_LENDING_INVARIANT_B(0, 0);
        Tester.setOraclePrice(0, 0);
        _delay(30);
        Tester.borrowShares(1, 0, 0);
    }

    function test_replaytransitionCollateral() public {
        Tester.mint(1023, 0, 0, 0);
        Tester.transitionCollateral(679, 0, 0, 0);
    }

    function test_replayredeem() public {
        // Mint on silo 0 protected collateral
        Tester.mint(1025, 0, 0, 0);
        Tester.setOraclePrice(282879448546642360938617676663071922922812, 0);

        // Mint on silo 1 collateral
        Tester.mint(36366106112624882, 0, 1, 1);

        // Borrow shares on silo 1 using silo 0 protected collateral as collateral
        Tester.borrowShares(315, 0, 1);

        // Switch collateral from 0 silo 1
        Tester.switchCollateralToThisSilo(1);

        // Max Withdraw from silo 1
        Tester.assert_LENDING_INVARIANT_B(1, 1);
        _delay(345519);
        Tester.redeem(694, 0, 0, 0);
    }

    function test_replaytransitionCollateral2() public {
        Tester.mint(4003, 0, 0, 0);
        Tester.mint(4142174, 0, 1, 1);
        Tester.setOraclePrice(5167899937944767889217962943343171205019348763, 0);
        Tester.assertBORROWING_HSPOST_F(0, 1);
        Tester.setOraclePrice(2070693789985146455311434266782705402030751026, 1);
        Tester.transitionCollateral(2194, 0, 0, 0);
    }

    function test_replayborrowShares2() public {
        _setUpActor(0x0000000000000000000000000000000000010000);
        _delay(326792);
        Tester.mint(340282423155723237052512385577070742059, 30, 112, 137);
        _delay(474683);
        Tester.deposit(3121116753, 199, 132, 32);
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(578494);
        Tester.borrowSameAsset(699, 159, 120);
        _setUpActor(0x0000000000000000000000000000000000010000);
        _delay(306998);
        Tester.assert_LENDING_INVARIANT_B(28, 15);
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(326329);
        Tester.assert_LENDING_INVARIANT_B(6, 30);
        _setUpActor(0x0000000000000000000000000000000000030000);
        _delay(267435);
        Tester.mint(23937089108029247970912786558, 27, 0, 13);
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(33);
        Tester.deposit(25000000000000001, 190, 13, 254);
        _delay(22080);
        Tester.setOraclePrice(56466874253382507631663260754233357053746765190105168440061833491889481131123, 159);
        _delay(50246);
        Tester.borrowShares(31361538392562449977676, 255, 16);
    }

    function test_replayTesterassertBORROWING_HSPOST_F2() public {
        Tester.mint(40422285801235863700109, 1, 1, 0); // Deposit on Silo 1 for ACTOR2
        Tester.deposit(2, 0, 0, 1); // Deposit on Silo 0 for ACTOR1
        Tester.assertBORROWING_HSPOST_F(1, 0); // ACTOR tries to maxBorrow on Silo 0
    }

    function test_replayborrow2() public {
        // Deposit on Silo 0
        Tester.mint(1197289752, 0, 0, 1);

        // Borrow same asset on Silo 0
        Tester.borrowSameAsset(666462, 0, 0);

        // Deposit on Silo 1
        Tester.deposit(1, 0, 1, 0);

        // Max withdraw from Silo 0
        Tester.assert_LENDING_INVARIANT_B(0, 1);

        _delay(3889);

        // Borrow same asset on Silo 1
        // Lower price of Asset 0 to the minimum (not zero, the hander clamps the value to a minimum price)
        Tester.setOraclePrice(0, 0);

        // Borrow from Silo 0 using Silo 1 as collateral
        Tester.borrow(1, 0, 0);
    }

    ///////////////////////////////////////////////////////////////////////////////////////////////
    //                                 POSTCONDITIONS: FINAL REVISION                            //
    ///////////////////////////////////////////////////////////////////////////////////////////////

    function test_replay_deposit() public {
        Tester.mint(13030923723425133684497, 0, 0, 0);
        Tester.deposit(21991861, 13, 59, 3);
        Tester.borrow(621040, 0, 1);
        _delay(11818);
        Tester.accrueInterestForBothSilos();
        _delay(3706);
        Tester.deposit(7866581, 0, 1, 1);
    }

    function test_replay_borrow() public {
        Tester.mint(2518531959823837031380, 0, 0, 0);
        Tester.deposit(1780157, 0, 1, 1);
        Tester.borrow(1722365, 0, 1);
        _delay(29);
        Tester.accrueInterestForBothSilos();
        _delay(22);
        Tester.borrow(1, 0, 1);
    }

    function test_replay_borrowSameAsset() public {
        Tester.mint(580836077360653463743629447964978, 0, 0, 0);
        Tester.setOraclePrice(39661949851364677948183886078802709693713432198988909772643851412, 1);
        Tester.mint(1054429549, 0, 1, 1);
        Tester.assertBORROWING_HSPOST_F(0, 1);
        _delay(1638);
        Tester.mint(27081962, 0, 1, 0);
        _delay(67);
        Tester.borrowSameAsset(1, 0, 1);
    }

    function test_replay_assert_BORROWING_HSPOST_D() public {
        _setUpActor(0x0000000000000000000000000000000000010000);
        _delay(322357);
        Tester.mint(578648582, 16, 16, 54);
        _delay(4177);
        Tester.deposit(85084973744223259135554130, 3, 10, 101);
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(475271);
        Tester.borrowSameAsset(1, 0, 0);
        _setUpActor(0x0000000000000000000000000000000000010000);
        _delay(46521);
        Tester.assert_LENDING_INVARIANT_B(0, 1);
        _setUpActor(0x0000000000000000000000000000000000020000);
        _delay(187977);
        Tester.assert_BORROWING_HSPOST_D(90, 150);
        _setUpActor(0x0000000000000000000000000000000000010000);
        _delay(411916);
        Tester.withdraw(115792089237316195423570985008687907853269984665640564039457584007910656676987, 104, 38, 135);
        _delay(62993);
        Tester.accrueInterest(42);
        _delay(490448);
        Tester.assert_BORROWING_HSPOST_D(1, 88);
    }

    function test_replay_assert_LENDING_INVARIANT_B() public {
        // error: NotSolvent
        Tester.mint(632707868, 0, 0, 1);
        Tester.borrowSameAsset(313517, 0, 0);
        _delay(195346);
        Tester.accrueInterest(0);
        _delay(130008);
        Tester.assert_LENDING_INVARIANT_B(0, 1);
    }

    function test_replay_assertBORROWING_HSPOST_F() public {
        Tester.mint(11638058238813243150339, 0, 0, 0);
        Tester.deposit(8533010, 0, 1, 1);
        Tester.borrow(8256930, 0, 1);
        _delay(12);
        Tester.accrueInterest(1);
        _delay(7);
        Tester.assertBORROWING_HSPOST_F(0, 1);
    }

    function test_replay_accrueInterestForSilo() public {
        Tester.mint(157818656604306680780, 0, 0, 0);
        Tester.deposit(252962, 0, 1, 1);
        Tester.borrow(94940, 0, 1);
        _delay(12243);
        Tester.deposit(1, 0, 1, 0);
        _delay(95151);
        Tester.accrueInterestForSilo(1);
    }

    ///////////////////////////////////////////////////////////////////////////////////////////////
    //                                           HELPERS                                         //
    ///////////////////////////////////////////////////////////////////////////////////////////////

    /// @notice Fast forward the time and set up an actor,
    /// @dev Use for ECHIDNA call-traces
    function _delay(uint256 _seconds) internal {
        vm.warp(block.timestamp + _seconds);
    }

    /// @notice Set up an actor
    function _setUpActor(address _origin) internal {
        actor = actors[_origin];
    }

    /// @notice Set up an actor and fast forward the time
    /// @dev Use for ECHIDNA call-traces
    function _setUpActorAndDelay(address _origin, uint256 _seconds) internal {
        actor = actors[_origin];
        vm.warp(block.timestamp + _seconds);
    }

    /// @notice Set up a specific block and actor
    function _setUpBlockAndActor(uint256 _block, address _user) internal {
        vm.roll(_block);
        actor = actors[_user];
    }

    /// @notice Set up a specific timestamp and actor
    function _setUpTimestampAndActor(uint256 _timestamp, address _user) internal {
        vm.warp(_timestamp);
        actor = actors[_user];
    }
}
