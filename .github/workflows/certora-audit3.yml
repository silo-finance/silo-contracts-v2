# A workflow file for running Certora verification through GitHub actions.
# Find results for each push in the "Actions" tab on the GitHub website.
name: Certora verification
run-name: Certora verification of ${{ github.event_name }}

on:
  pull_request:
    branches:
      - 'certora-audit-3'
  workflow_dispatch:

jobs:
  verify:
    runs-on: ubuntu-latest
    steps:
      # check out the current version (recurse submodules)
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      # install Certora dependencies and CLI
      - name: Install python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'
          # cache: 'pip'

      # NOTE: useing certora-cli-beta for now!
      - name: Install certora
        run: pip3 install certora-cli-beta

      # the following is only necessary if your project depends on contracts
      # installed using yarn
      - name: Install yarn
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: 'yarn'
      - name: Install dependencies
        run: yarn

      # Install solc-select 0.8.28
      - name: Install solc-select
        run: |
          pip install solc-select
          solc-select install 0.8.28
          solc-select use 0.8.28

      # Also download the solc 0.8.28 binaries and name it solc8,28
      - name: Install solc-binary
        run: |
          wget https://github.com/ethereum/solidity/releases/download/v0.8.28/solc-static-linux
          sudo mv solc-static-linux /usr/local/bin/solc8.28
          chmod +x /usr/local/bin/solc8.28

      # TODO: Do we need ssh-keyscan github.com >> ~/.ssh/known_hosts ?
      # - name: Install ConfRunnerInfra
      #   run: pip3 install git+ssh://git@github.com/Certora/ConfRunnerInfra.git

      # Do the actual verification. The `run` field could be simply
      #
      #   certoraRun certora/conf/${{ matrix.params }}
      # 
      # but we do a little extra work to get the commit hash into the
      # `--msg` argument
      #
      # Here ${{ matrix.params }} gets replaced with each of the parameters
      # listed in the `params` section below.
      - name: Verify rule ${{ matrix.params.name }}
        run: >
          message="$(git log -n 1 --pretty=format:'CI ${{matrix.params.name}} %h')";
          certoraRun \
            certora/config/${{ matrix.params.command }} \
            --wait_for_results \
            --msg "$(echo $message | sed 's/[^a-zA-Z0-9., _-]/ /g')"
        env:
          # For this to work, you must set your CERTORAKEY secret on the GitHub
          # website (settings > secrets > actions > new repository secret)
          CERTORAKEY: ${{ secrets.CERTORAKEY }}

    strategy:
      fail-fast: false
      max-parallel: 20
      matrix:
        params:
          # Each of these commands is passed to the "Verify rule" step above,
          # which runs certoraRun on certora/config/<contents of the command>
          #
          # Note that each of these lines will appear as a separate run on
          # prover.certora.com
          #
          # It is often helpful to split up by rule or even by method for a
          # parametric rule, although it is certainly possible to run everything
          # at once by not passing the `--rule` or `--method` options
          #- {name: transferSpec,        command: 'ERC20.conf --rule transferSpec'}
          #- {name: generalRulesOnERC20, command: 'generalRules_ERC20.conf --debug'}
          #- {name: generalRulesOnVAULT, command: 'generalRules_VAULT.conf --debug'}
          #
          # ==== methods_integrity =============================================
          - {
            name: HLP_integrityOfBorrow,
            command: 'silo/methods_integrity.conf --rule HLP_integrityOfBorrow'
          }
          - {
            name: HLP_integrityOfBorrowSame,
            command: 'silo/methods_integrity.conf --rule HLP_integrityOfBorrowSame'
          }
          - {
            name: HLP_integrityOfBorrowShares,
            command: 'silo/methods_integrity.conf --rule HLP_integrityOfBorrowShares'
          }
          - {
            name: HLP_integrityOfDeposit,
            command: 'silo/methods_integrity.conf --rule HLP_integrityOfDeposit'
          }
          - {
            name: HLP_integrityOfMint,
            command: 'silo/methods_integrity.conf --rule HLP_integrityOfMint'
          }
          - {
            name: HLP_integrityOfRedeem,
            command: 'silo/methods_integrity.conf --rule HLP_integrityOfRedeem'
          }
          - {
            name: HLP_integrityOfWithdraw,
            command: 'silo/methods_integrity.conf --rule HLP_integrityOfWithdraw'
          }
          - {name: HLP_integrityOfRepay,
            command: 'silo/methods_integrity.conf --rule HLP_integrityOfRepay'
          }
          - {
            name: HLP_integrityOfRepayShares,
            command: 'silo/methods_integrity.conf --rule HLP_integrityOfRepayShares'
          }
          # ==== access-single-silo ============================================
          - {
            name: RA_anyone_deposit_repay,
            command: 'silo/access-single-silo.conf --rule RA_anyone_may_deposit --rule RA_anyone_may_repay'
          }
          - {
            name: RA_deposit_recip_repay_borrow_shares,
            command: "silo/access-single-silo.conf
              --rule RA_deposit_recipient_is_not_restricted
              --rule RA_repay_borrower_is_not_restricted_by_shares"
          }
          - {
            name: Authorized_functions_silo,
            command: 'silo/authorized_functions.conf --parametric_contracts Silo0 --rule onlyTrustedSender --prover_args "-destructiveOptimizations enable -maxConcurrentTransforms INLINED_HOOKS:1,OPTIMIZE_OVERFLOW:1 -maxDecompiledCommandCount 1350000"'
          }
          - {
            name: Authorized_functions_without_silo,
            command: 'silo/authorized_functions.conf --parametric_contracts ShareDebtToken0 ShareProtectedCollateralToken0 SiloConfig --rule_sanity basic'
          }
          - {
            name: RA_reentrancy_without_silo,
            command: 'silo/risk_assessment.conf --rule_sanity basic'
          }
          # - { #this one is still failing 
          #  name: RA_reentrancy_silo_StatusChanged,
          #  command: 'silo/risk_assessment_silo.conf --rule RA_reentrancyGuardStatusChanged'
          #}
          - {
            name: RA_reentrancy_silo_StatusLoaded,
            command: 'silo/risk_assessment_silo.conf --rule RA_reentrancyGuardChecked'
          }
          - {
            name: RA_reentrancy_silo_unlock,
            command: 'silo/risk_assessment_silo.conf --rule RA_reentrancyGuardStaysUnlocked'
          }
          # NOTE: RA_repay_borrower_is_not_restricted is violated!
          # ==== meta rules ====================================================
          - {
            name: meta_config_single_silo,
            command: 'meta/config_for_one_equivalence.conf --exclude_rule sanityWithSetup_borrow'
          }
          - {
            name: meta_config_two_silos,
            command: 'meta/config_for_two_equivalence.conf --exclude_rule sanityWithSetup_borrow'
          }
          # ==== new rules from the list ============================================
          - {
            name: accrueInterest_neverReverts,
            command: 'silo/newRulesFromTheList.conf --rule accrueInterest_neverReverts'
          }
           - {
            name: noDebt_thenSolventAndNoLTV,
            command: 'silo/newRulesFromTheList.conf --rule noDebt_thenSolventAndNoLTV'
          }
           - {
            name: accrueInterest_idempotent,
            command: 'silo/newRulesFromTheList.conf --rule accrueInterest_idempotent'
          }
           - {
            name: withdrawFees_revertsSecondTime,
            command: 'silo/newRulesFromTheList.conf --rule withdrawFees_revertsSecondTime'
          }
           - {
            name: withdrawFees_increasesDaoDeploerFees,
            command: 'silo/newRulesFromTheList.conf --rule withdrawFees_increasesDaoDeploerFees'
          }
           - {
            name: withdrawFees_noAdditionalEffect,
            command: 'silo/newRulesFromTheList.conf --rule withdrawFees_noAdditionalEffect'
          }
           - {
            name: borrowerCollateralSilo_neverSetToZero,
            command: 'silo/newRulesFromTheList.conf --rule borrowerCollateralSilo_neverSetToZero'
          }
           - {
            name: accrueInterestForSilo_equivalent,
            command: 'silo/newRulesFromTheList.conf --rule accrueInterestForSilo_equivalent'
          }
           - {
            name: insolventHaveDebtShares,
            command: 'silo/newRulesFromTheList.conf --rule insolventHaveDebtShares'
          }
           - {
            name: cannotHaveDebtInBothSilos,
            command: 'silo/newRulesFromTheList.conf --rule cannotHaveDebtInBothSilos'
          }
           - {
            name: borrowerCollateralSilo_setNonzeroIncreasesDebt,
            command: 'silo/newRulesFromTheList.conf --rule borrowerCollateralSilo_setNonzeroIncreasesDebt'
          }
           - {
            name: borrowerCollateralSilo_setNonzeroIncreasesBalance,
            command: 'silo/newRulesFromTheList.conf --rule borrowerCollateralSilo_setNonzeroIncreasesBalance'
          }
           - {
            name: withdrawOnlyRevertsOnLiquidity,
            command: 'silo/newRulesFromTheList.conf --rule withdrawOnlyRevertsOnLiquidity'
          }
           - {
            name: solventAfterWithdraw,
            command: 'silo/newRulesFromTheList.conf --rule solventAfterWithdraw'
          }
           - {
            name: debt_thenBorrowerCollateralSiloSetAndHasShares,
            command: 'silo/newRulesFromTheList.conf --rule debt_thenBorrowerCollateralSiloSetAndHasShares'
          }
           - {
            name: noDebtInBothSilos,
            command: 'silo/newRulesFromTheList.conf --rule noDebtInBothSilos'
          }
           - {
            name: flashFee_nonZero,
            command: 'silo/newRulesFromTheList.conf --rule flashFee_nonZero'
          }
          # ==== max- correctness ============================================
           - {
            name: HLP_MaxMint_reverts,
            command: 'silo/maxCorectness.conf --rule HLP_MaxMint_reverts'
          }
           - {
            name: HLP_MaxRedeem_reverts,
            command: 'silo/maxCorectness.conf --rule HLP_MaxRedeem_reverts'
          }
           - {
            name: HLP_MaxDeposit_reverts,
            command: 'silo/maxCorectness.conf --rule HLP_MaxDeposit_reverts'
          }
           - {
            name: HLP_MaxWithdraw_reverts,
            command: 'silo/maxCorectness.conf --rule HLP_MaxWithdraw_reverts'
          }
           - {
            name: HLP_MaxBorrow_reverts,
            command: 'silo/maxCorectness.conf --rule HLP_MaxBorrow_reverts'
          }
           - {
            name: HLP_MaxRepay_reverts,
            command: 'silo/maxCorectness.conf --rule HLP_MaxRepay_reverts'
          }
           - {
            name: HLP_MaxRepayShares_reverts,
            command: 'silo/maxCorectness.conf --rule HLP_MaxRepayShares_reverts'
          }
           - {
            name: HLP_MaxBorrowSameAsset_reverts,
            command: 'silo/maxCorectness.conf --rule HLP_MaxBorrowSameAsset_reverts'
          }
           - {
            name: maxBorrow_noRevert,
            command: 'silo/maxCorectness.conf --rule maxBorrow_noRevert'
          }
           - {
            name: maxRepay_neverGreaterThanTotalDebt,
            command: 'silo/maxCorectness.conf --rule maxRepay_neverGreaterThanTotalDebt'
          }
           - {
            name: HLP_MaxRedeem_noRevert,
            command: 'silo/maxCorectness.conf --rule HLP_MaxRedeem_noRevert'
          }
           - {
            name: HLP_MaxRedeem_noGreaterThanBalance,
            command: 'silo/maxCorectness.conf --rule HLP_MaxRedeem_noGreaterThanBalance'
          }
           - {
            name: maxRepay_burnsAllDebt,
            command: 'silo/maxCorectness.conf --rule maxRepay_burnsAllDebt'
          }
           - {
            name: maxWithdraw_noRevert,
            command: 'silo/maxCorectness.conf --rule maxWithdraw_noRevert'
          }
           - {
            name: maxWithdraw_noGreaterThanLiquidity,
            command: 'silo/maxCorectness.conf --rule maxWithdraw_noGreaterThanLiquidity'
          }

