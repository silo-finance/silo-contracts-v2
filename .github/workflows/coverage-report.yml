name: Coverage Report

on:
  workflow_dispatch:
    inputs:
      workspace:
        description: 'Workspace to generate coverage for'
        required: true
        type: choice
        options:
          - silo-core
          - silo-oracles
          - silo-vaults

env:
  RPC_MAINNET: ${{ secrets.RPC_MAINNET }}
  RPC_ARBITRUM: ${{ secrets.RPC_ARBITRUM }}
  RPC_OPTIMISM: ${{ secrets.RPC_OPTIMISM }}
  RPC_ANVIL: ${{ secrets.RPC_ANVIL }}
  RPC_SONIC: ${{ secrets.RPC_SONIC }}
  PRIVATE_KEY: ${{ secrets.ANVIL_PRIVATE_KEY }}

jobs:
  generate-coverage:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: stable

      - name: Install lcov 2.1
        run: |
          # Install dependencies
          sudo apt-get update
          sudo apt-get install -y perl libcapture-tiny-perl libdatetime-perl
          
          # Download and install lcov 2.1
          wget https://github.com/linux-test-project/lcov/releases/download/v2.1/lcov-2.1.tar.gz
          tar -xzf lcov-2.1.tar.gz
          cd lcov-2.1
          sudo make install

          # Verify installation
          which lcov
          which genhtml

      - name: Show lcov version
        run: |
          lcov --version
          genhtml --version

      - name: Run submodule update
        run: git submodule update --init --recursive

      - name: Build silo foundry utils
        working-directory: ./gitmodules/silo-foundry-utils
        run: |
          cargo build --release
          cp target/release/silo-foundry-utils ../../silo-foundry-utils
          ../../silo-foundry-utils --version

      - name: Cache silo-core contracts
        uses: actions/cache@v3
        with:
          path: ./cache/
          key: silo-core-contracts-cache-${{ hashFiles('./silo-core/**/*.sol') }}
          restore-keys: |
            silo-core-contracts-cache-${{ hashFiles('./silo-core/**/*.sol') }}
            silo-core-contracts-cache-

      - name: Run Forge build
        run: |
          FOUNDRY_PROFILE=core forge build --sizes

      - name: Create coverage directory
        run: mkdir -p coverage

      - name: Generate coverage for silo-core
        if: inputs.workspace == 'silo-core'
        run: |
          rm -f lcov.info
          echo "Running forge coverage..."
          AGGREGATOR=1INCH FOUNDRY_PROFILE=core_with_test forge coverage --report summary --report lcov --gas-price 1 --ffi --gas-limit 40000000000 --no-match-test "_skip_|_gas_|_anvil_" > coverage/silo-core.log 2>&1 || true

          echo "Coverage log contents:"
          cat coverage/silo-core.log || true

          cat coverage/silo-core.log | grep -i 'silo-core/contracts/' > coverage/silo-core.txt || true

          if [ -f lcov.info ]; then
            echo "lcov.info found, generating HTML report..."
            genhtml --ignore-errors inconsistent -ignore-errors range -o coverage/silo-core/ lcov.info
          else
            echo "ERROR: lcov.info not generated. Check the coverage log above for errors."
            exit 1
          fi

      - name: Generate coverage for silo-oracles
        if: inputs.workspace == 'silo-oracles'
        run: |
          rm -f lcov.info
          FOUNDRY_PROFILE=oracles forge coverage --report summary --report lcov > coverage/silo-oracles.log || true
          cat coverage/silo-oracles.log | grep -i 'silo-oracles/contracts/' > coverage/silo-oracles.txt || true
          genhtml -o coverage/silo-oracles/ lcov.info

      - name: Generate coverage for silo-vaults
        if: inputs.workspace == 'silo-vaults'
        run: |
          rm -f lcov.info
          FOUNDRY_PROFILE=vaults_with_tests forge coverage --report summary --report lcov --gas-price 1 --ffi --gas-limit 40000000000 > coverage/silo-vaults.log || true
          cat coverage/silo-vaults.log | grep -i 'silo-vaults/contracts/' > coverage/silo-vaults.txt || true
          genhtml --ignore-errors inconsistent -o coverage/silo-vaults/ lcov.info

      - name: Get branch name
        id: branch-name
        run: |
          # github.ref_name contains the branch name when using workflow_dispatch
          BRANCH_NAME="${{ github.ref_name }}"
          echo "branch=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "Running coverage on branch: $BRANCH_NAME"

      - name: Prepare deployment directory
        run: |
          mkdir -p deploy-coverage
          cp -r coverage/${{ inputs.workspace }}/* deploy-coverage/
          echo "<h1>Coverage Report - ${{ inputs.workspace }}</h1>" > deploy-coverage/header.html
          echo "<p>Branch: ${{ steps.branch-name.outputs.branch }}</p>" >> deploy-coverage/header.html
          echo "<p>Generated: $(date)</p>" >> deploy-coverage/header.html
          echo "<hr>" >> deploy-coverage/header.html
          if [ -f deploy-coverage/index.html ]; then
            cat deploy-coverage/header.html deploy-coverage/index.html > deploy-coverage/index-new.html
            mv deploy-coverage/index-new.html deploy-coverage/index.html
          fi

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./deploy-coverage
          destination_dir: coverage/${{ steps.branch-name.outputs.branch }}/${{ inputs.workspace }}
          keep_files: true

      - name: Generate job summary
        run: |
          PAGES_URL="https://silo-finance.github.io/silo-contracts-v2/coverage/${{ steps.branch-name.outputs.branch }}/${{ inputs.workspace }}/"
          echo "# Coverage Report Generated! ðŸŽ‰" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Workspace**: ${{ inputs.workspace }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ steps.branch-name.outputs.branch }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Generated at**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## ðŸ“Š View Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "[Click here to view the coverage report]($PAGES_URL)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Direct URL: \`$PAGES_URL\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Note:** The coverage report may take a few minutes to be available after deployment. If you get a 404 error, please wait a moment and refresh the page." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Also output the URL for easy copying
          echo "Coverage report available at: $PAGES_URL"
