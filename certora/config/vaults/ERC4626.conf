{
  "files": [
    "certora/harness/vaults/SiloVaultHarness.sol",
    "certora/harness/vaults/ERC20Helper.sol",
    "certora/mocks/vaults/Vault0.sol",
    "certora/mocks/vaults/Vault1.sol",
    "silo-vaults/contracts/libraries/SiloVaultActionsLib.sol",
    "gitmodules/morpho-blue/src/libraries/UtilsLib.sol",  // we need the address of this contract to allow calls to it
    //"certora/mocks/vaults/Vault2.sol",
    "certora/mocks/vaults/Token0.sol",
  ],
  "server": "production",
  "optimistic_loop": true,
  "loop_iter": "2",
  "prover_args": [ "-enableCopyLoopRewrites true"],
  "link": [
    "Vault0:_asset=Token0",
    "SiloVaultHarness:_asset=Token0",
  ],
  //"rule_sanity": "basic",
  //"coverage_info": "advanced",
  "solc": "solc8.28",
  "smt_timeout": "7200",
  "verify": "SiloVaultHarness:certora/specs/vaults/AssetsShares.spec",
  "parametric_contracts": "SiloVaultHarness",
  "packages":[
    "openzeppelin-contracts/=gitmodules/openzeppelin-contracts/contracts",
    "openzeppelin5/=gitmodules/openzeppelin-contracts-5/contracts",
    "morpho-blue/=gitmodules/morpho-blue/src",
  ],

  "msg": "ERC4626 conversionWeakMonotonicity 2",

  "rule": ["conversionWeakMonotonicity" ],

  // these hold:
  //"rule": ["contributingProducesShares", "zeroAllowanceOnAssets", "redeemingAllValidity", "dustFavorsTheHouse", "underlyingCannotChange", "zeroDepositZeroShares", "conversionOfZero", "noDynamicCalls", "onlyContributionMethodsReduceAssets", "conversionWeakMonotonicity_assets", "conversionWeakMonotonicity_shares" ],

  // these are violated 
  //"exclude_rule": [ "zeroAssetsZeroShares", "moreAssetsThanShares", "assetsMoreThanSupply", "totalsMonotonicity", ],

  // violated and timeouts
  //"exclude_rule": [ "zeroAssetsZeroShares", "moreAssetsThanShares", "assetsMoreThanSupply", "totalsMonotonicity", "convertToCorrectness", "conversionWeakIntegrity", "conversionWeakMonotonicity", "convertToSharesWeakAdditivity", "convertToAssetsWeakAdditivity" ],
  //"rule":  ["noDynamicCalls", "convertToAssetsWeakAdditivity", "convertToSharesWeakAdditivity", "convertToSharesWeakAdditivity", "conversionWeakIntegrity", "convertToCorrectness", "depositMonotonicity", "totalsMonotonicity", "redeemingAllValidity", "contributingProducesShares", "reclaimingProducesAssets"],
  //"split_rules": ["noDynamicCalls", "convertToAssetsWeakAdditivity", "convertToSharesWeakAdditivity", "convertToSharesWeakAdditivity", "conversionWeakIntegrity", "convertToCorrectness", "depositMonotonicity", "totalsMonotonicity", "redeemingAllValidity", "contributingProducesShares", "reclaimingProducesAssets"],
  //"split_rules": ["*"],
}
